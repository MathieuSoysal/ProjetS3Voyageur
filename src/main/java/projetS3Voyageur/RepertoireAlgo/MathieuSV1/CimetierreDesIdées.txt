    private void rechercheAux(Deque<Integer> villesAVisiterAux, int numVillePrecedent, double distanceParcourue,
            String villesEmprunte) {

        Integer premierNumVille = villesAVisiterAux.poll();
        double distanceParcouruePlusVilleActuel;
        String villesEmpruntePlusVilleActuel;

        villesAVisiterAux.offer(premierNumVille);

        do {
            Integer villeActuel = villesAVisiterAux.poll();

            villesEmpruntePlusVilleActuel = villesEmprunte + "|" +  villeActuel + "->";
            distanceParcouruePlusVilleActuel = distanceParcourue
                    + pays.getDistanceEntreVilles(numVillePrecedent, villeActuel);

            if (villesAVisiterAux.isEmpty()) {
                if ((distanceParcouruePlusVilleActuel) < parcourOptimum.getDistance()) {
                    parcourOptimum = new Parcour(distanceParcouruePlusVilleActuel, villesEmpruntePlusVilleActuel);
                }
            } else {
                rechercheAux(villesAVisiterAux, villeActuel, distanceParcouruePlusVilleActuel,
                        villesEmpruntePlusVilleActuel);
            }

            villesAVisiterAux.offer(villeActuel);
        } while (villesAVisiterAux.peek() != premierNumVille);
    }